apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

# EKS Multi-Architecture Production Deployment
# Optimized for AWS EKS with support for both AMD64 (Intel/AMD) and ARM64 (Graviton2/3) instances
# Tested instance types: t3.xlarge, t4g.xlarge, m5.xlarge, m6g.xlarge
# Cost optimization: ARM64 instances provide 20-40% cost savings
metadata:
  name: falco-vanguard-eks
  annotations:
    cloud-provider: eks
    optimized-for: "Amazon Elastic Kubernetes Service"
    architecture-support: "amd64,arm64"
    graviton-support: "true"
    cost-optimization: "arm64-graviton-instances"

resources:
  - ../../base
  - hpa.yaml

namespace: falco-vanguard

namePrefix: prod-

commonLabels:
  environment: production
  platform: eks
  app.kubernetes.io/version: "2.1.0"

patches:
  # EKS-specific storage class
  - target:
      kind: PersistentVolumeClaim
    patch: |-
      - op: add
        path: /spec/storageClassName
        value: "gp3"
  
  # AWS Load Balancer Controller instead of nginx
  - target:
      kind: Ingress
      name: falco-vanguard-ingress
    patch: |-
      - op: replace
        path: /metadata/annotations
        value:
          kubernetes.io/ingress.class: "alb"
          alb.ingress.kubernetes.io/scheme: "internet-facing"
          alb.ingress.kubernetes.io/target-type: "ip"
          alb.ingress.kubernetes.io/load-balancer-name: "falco-vanguard-alb"
          alb.ingress.kubernetes.io/ssl-redirect: "443"
          alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:region:account:certificate/cert-id"
      - op: remove
        path: /spec/ingressClassName
      - op: remove
        path: /spec/tls
  
  # Optimize for EKS node types
  - target:
      kind: Deployment
      name: ollama
    patch: |-
      - op: replace
        path: /spec/template/spec/containers/0/resources/requests/memory
        value: "6Gi"
      - op: replace
        path: /spec/template/spec/containers/0/resources/limits/memory
        value: "8Gi"
      - op: replace
        path: /spec/template/spec/containers/0/env/1/value
        value: "45"  # EKS timeout for cloud infrastructure
      - op: replace
        path: /spec/template/spec/containers/0/env/2/value
        value: "8m"  # Balanced memory retention for cloud nodes
  
  # Production scaling with multi-architecture support
  - target:
      kind: Deployment
      name: falco-vanguard
    patch: |-
      - op: replace
        path: /spec/replicas
        value: 3
      - op: replace
        path: /spec/template/spec/containers/0/resources/requests/memory
        value: "512Mi"
      - op: replace
        path: /spec/template/spec/containers/0/resources/limits/memory
        value: "1Gi"
      - op: add
        path: /spec/template/spec/affinity
        value:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values: ["amd64", "arm64"]
                - key: node.kubernetes.io/instance-type
                  operator: In
                  values: ["t3.medium", "t3.large", "t4g.medium", "t4g.large", "m5.large", "m6g.large"]
  
  # EKS ConfigMap timeout configuration
  - target:
      kind: ConfigMap
      name: falco-vanguard-config
    patch: |-
      - op: replace
        path: /data/OLLAMA_TIMEOUT
        value: "45"  # EKS cloud timeout
      - op: replace
        path: /data/AI_REQUEST_TIMEOUT
        value: "45"  # Match Ollama timeout
  
  # EKS multi-architecture node affinity (supports both AMD64 and ARM64)
  - target:
      kind: Deployment
      name: ollama
    patch: |-
      - op: add
        path: /spec/template/spec/affinity
        value:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values: ["amd64", "arm64"]
                - key: node.kubernetes.io/instance-type
                  operator: In
                  values: ["t3.xlarge", "t3.2xlarge", "t4g.xlarge", "t4g.2xlarge", "m5.xlarge", "m6g.xlarge"]
            - weight: 80
              preference:
                matchExpressions:
                - key: karpenter.sh/capacity-type
                  operator: In
                  values: ["on-demand", "spot"]
  
  # Weaviate multi-architecture support for EKS
  - target:
      kind: Deployment
      name: weaviate
    patch: |-
      - op: add
        path: /spec/template/spec/affinity
        value:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values: ["amd64", "arm64"]
                - key: node.kubernetes.io/instance-type
                  operator: In
                  values: ["t3.large", "t3.xlarge", "t4g.large", "t4g.xlarge", "m5.large", "m6g.large"]
  
  # Remove NetworkPolicy for EKS (use Security Groups instead)
  - target:
      kind: NetworkPolicy
      name: falco-vanguard-network-policy
    patch: |-
      - op: replace
        path: /metadata/annotations
        value:
          note: "Replaced by AWS Security Groups for Pods"

images:
  # Multi-architecture image (supports both AMD64 and ARM64)
  # Kubernetes automatically selects the correct architecture
  - name: falco-vanguard
    newName: maddigsys/falco-vanguard
    newTag: "v2.1.0"  # Multi-arch manifest
  - name: ollama
    newName: ollama/ollama
    newTag: "latest"  # Multi-arch manifest

# EKS-specific annotations for deployment tracking
commonAnnotations:
  deployment.kubernetes.io/revision: "1"
  eks.amazonaws.com/compute-type: "mixed"  # Supports both x86_64 and arm64
  falco-vanguard.io/arch-support: "amd64,arm64"
  falco-vanguard.io/tested-instance-types: "t3.xlarge,t4g.xlarge,m5.xlarge,m6g.xlarge" 