apiVersion: apps/v1
kind: Deployment
metadata:
  name: falco-ai-alerts
  namespace: falco-ai-alerts
  labels:
    app.kubernetes.io/name: falco-ai-alerts
    app.kubernetes.io/component: application
    app.kubernetes.io/version: "2.1.8"
    app.kubernetes.io/part-of: falco-ecosystem
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: falco-ai-alerts
  template:
    metadata:
      labels:
        app.kubernetes.io/name: falco-ai-alerts
        app.kubernetes.io/component: application
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      serviceAccountName: falco-ai-alerts
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: falco-ai-alerts
        image: maddigsys/falco-ai-alerts:v2.1.8
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        envFrom:
        - configMapRef:
            name: falco-ai-alerts-config
        - secretRef:
            name: falco-ai-alerts-secrets
        volumeMounts:
        - name: data
          mountPath: /app/data
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: falco-ai-alerts-data
      - name: tmp
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - falco-ai-alerts
              topologyKey: kubernetes.io/hostname 